
TrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000205c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080021e4  080021e4  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002224  08002224  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002224  08002224  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002224  08002224  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002224  08002224  00012224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002228  08002228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800222c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002238  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002238  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea4b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000236d  00000000  00000000  0002ea87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00030df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00031b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a1e  00000000  00000000  00032760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef4e  00000000  00000000  0005a17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea4be  00000000  00000000  000690cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015358a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003560  00000000  00000000  001535e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021cc 	.word	0x080021cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080021cc 	.word	0x080021cc

080001c8 <_ZN20BlinkingTrafficLightC1EP15LightController>:
#include "../Inc/BlinkingTrafficLight.hpp"

BlinkingTrafficLight::BlinkingTrafficLight(LightController *lightController)
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
{
    lightCtrl = lightController;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	605a      	str	r2, [r3, #4]
}
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4618      	mov	r0, r3
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <_ZN20BlinkingTrafficLight9setStatusEi>:

void BlinkingTrafficLight::setStatus(int status)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b083      	sub	sp, #12
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
 80001ee:	6039      	str	r1, [r7, #0]
    currentStatus = status;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	683a      	ldr	r2, [r7, #0]
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr

08000202 <_ZN20BlinkingTrafficLight9getStatusEv>:

int BlinkingTrafficLight::getStatus()
{
 8000202:	b480      	push	{r7}
 8000204:	b083      	sub	sp, #12
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
    return currentStatus;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
}
 800020e:	4618      	mov	r0, r3
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr

0800021a <_ZN20BlinkingTrafficLight10startCycleEv>:

void BlinkingTrafficLight::startCycle()
{
 800021a:	b580      	push	{r7, lr}
 800021c:	b082      	sub	sp, #8
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
    switch (getStatus())
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f7ff ffed 	bl	8000202 <_ZN20BlinkingTrafficLight9getStatusEv>
 8000228:	4603      	mov	r3, r0
 800022a:	2b02      	cmp	r3, #2
 800022c:	d00d      	beq.n	800024a <_ZN20BlinkingTrafficLight10startCycleEv+0x30>
 800022e:	2b04      	cmp	r3, #4
 8000230:	d117      	bne.n	8000262 <_ZN20BlinkingTrafficLight10startCycleEv+0x48>
    {
    case OFF:
        lightCtrl->TurnOFF(TIMER);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f95a 	bl	80004f4 <_ZN15LightController7TurnOFFEi>
        setStatus(COLOR);        
 8000240:	2102      	movs	r1, #2
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f7ff ffcf 	bl	80001e6 <_ZN20BlinkingTrafficLight9setStatusEi>
        break;
 8000248:	e00c      	b.n	8000264 <_ZN20BlinkingTrafficLight10startCycleEv+0x4a>
    case COLOR:
        lightCtrl->YellowON(TIMER);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f8f2 	bl	800043c <_ZN15LightController8YellowONEi>
        setStatus(OFF);
 8000258:	2104      	movs	r1, #4
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f7ff ffc3 	bl	80001e6 <_ZN20BlinkingTrafficLight9setStatusEi>
        break;
 8000260:	e000      	b.n	8000264 <_ZN20BlinkingTrafficLight10startCycleEv+0x4a>
    
    default:
        break;
 8000262:	bf00      	nop
    }
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <_ZN10ControllerC1EP19ItalianTrafficLightP20BlinkingTrafficLight>:
#include "../Inc/Controller.hpp"

Controller::Controller(ItalianTrafficLight *italianTrafficLight, BlinkingTrafficLight *blinkingTrafficLight)
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	607a      	str	r2, [r7, #4]
{
    italianTL = italianTrafficLight;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	601a      	str	r2, [r3, #0]
    blinkingTL = blinkingTrafficLight;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	605a      	str	r2, [r3, #4]
}
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	4618      	mov	r0, r3
 8000288:	3714      	adds	r7, #20
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <_ZN10Controller5startEi>:

void Controller::start(int phase)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
    switch (phase)
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d003      	beq.n	80002aa <_ZN10Controller5startEi+0x18>
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d004      	beq.n	80002b2 <_ZN10Controller5startEi+0x20>
    case NIGHT:
        night();
        break;
    
    default:
        break;
 80002a8:	e007      	b.n	80002ba <_ZN10Controller5startEi+0x28>
        day();
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 f809 	bl	80002c2 <_ZN10Controller3dayEv>
        break;
 80002b0:	e003      	b.n	80002ba <_ZN10Controller5startEi+0x28>
        night();
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f000 f818 	bl	80002e8 <_ZN10Controller5nightEv>
        break;
 80002b8:	bf00      	nop
    }
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <_ZN10Controller3dayEv>:

void Controller::day() 
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b082      	sub	sp, #8
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
    blinkingTL->setStatus(OFF);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	2104      	movs	r1, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff88 	bl	80001e6 <_ZN20BlinkingTrafficLight9setStatusEi>
    italianTL->startCycle();
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f834 	bl	8000348 <_ZN19ItalianTrafficLight10startCycleEv>
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <_ZN10Controller5nightEv>:

void Controller::night()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
    italianTL->setStatus(RED);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f818 	bl	800032c <_ZN19ItalianTrafficLight9setStatusEi>
    blinkingTL->startCycle();
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff8a 	bl	800021a <_ZN20BlinkingTrafficLight10startCycleEv>
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <_ZN19ItalianTrafficLightC1EP15LightController>:
#include "../Inc/ItalianTrafficLight.hpp"


ItalianTrafficLight::ItalianTrafficLight(LightController *lightController)
 800030e:	b480      	push	{r7}
 8000310:	b083      	sub	sp, #12
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
 8000316:	6039      	str	r1, [r7, #0]
{
    lightCtrl = lightController;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	605a      	str	r2, [r3, #4]
};
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <_ZN19ItalianTrafficLight9setStatusEi>:

void ItalianTrafficLight::setStatus(int status)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
    currentStatus = status;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	683a      	ldr	r2, [r7, #0]
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <_ZN19ItalianTrafficLight10startCycleEv>:
{
    return currentStatus;
}

void ItalianTrafficLight::startCycle()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    switch (currentStatus)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d01e      	beq.n	8000396 <_ZN19ItalianTrafficLight10startCycleEv+0x4e>
 8000358:	2b02      	cmp	r3, #2
 800035a:	dc28      	bgt.n	80003ae <_ZN19ItalianTrafficLight10startCycleEv+0x66>
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <_ZN19ItalianTrafficLight10startCycleEv+0x1e>
 8000360:	2b01      	cmp	r3, #1
 8000362:	d00c      	beq.n	800037e <_ZN19ItalianTrafficLight10startCycleEv+0x36>
        lightCtrl->GreenON(TIMER1);
        setStatus(YELLOW);
        break;
    
    default:
        break;
 8000364:	e023      	b.n	80003ae <_ZN19ItalianTrafficLight10startCycleEv+0x66>
        lightCtrl->RedON(TIMER1);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800036e:	4618      	mov	r0, r3
 8000370:	f000 f836 	bl	80003e0 <_ZN15LightController5RedONEi>
        setStatus(GREEN);        
 8000374:	2102      	movs	r1, #2
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f7ff ffd8 	bl	800032c <_ZN19ItalianTrafficLight9setStatusEi>
        break;
 800037c:	e018      	b.n	80003b0 <_ZN19ItalianTrafficLight10startCycleEv+0x68>
        lightCtrl->YellowON(TIMER2);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f858 	bl	800043c <_ZN15LightController8YellowONEi>
        setStatus(RED);
 800038c:	2100      	movs	r1, #0
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f7ff ffcc 	bl	800032c <_ZN19ItalianTrafficLight9setStatusEi>
        break;
 8000394:	e00c      	b.n	80003b0 <_ZN19ItalianTrafficLight10startCycleEv+0x68>
        lightCtrl->GreenON(TIMER1);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f87a 	bl	8000498 <_ZN15LightController7GreenONEi>
        setStatus(YELLOW);
 80003a4:	2101      	movs	r1, #1
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f7ff ffc0 	bl	800032c <_ZN19ItalianTrafficLight9setStatusEi>
        break;
 80003ac:	e000      	b.n	80003b0 <_ZN19ItalianTrafficLight10startCycleEv+0x68>
        break;
 80003ae:	bf00      	nop
    }

}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <_ZN15LightControllerC1Ev>:
#include "../Inc/LightController.hpp"

LightController::LightController()
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2200      	movs	r2, #0
 80003ca:	705a      	strb	r2, [r3, #1]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2200      	movs	r2, #0
 80003d0:	709a      	strb	r2, [r3, #2]
{

}
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <_ZN15LightController5RedONEi>:

void LightController::RedON(int timerValue)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
    LedRed = GPIO_PIN_SET;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2201      	movs	r2, #1
 80003ee:	701a      	strb	r2, [r3, #0]
    LedYellow = GPIO_PIN_RESET;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2200      	movs	r2, #0
 80003f4:	705a      	strb	r2, [r3, #1]
    LedGreen = GPIO_PIN_RESET;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2200      	movs	r2, #0
 80003fa:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(GPIOA, LedRed_Pin, LedRed);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	461a      	mov	r2, r3
 8000402:	2120      	movs	r1, #32
 8000404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000408:	f000 fe04 	bl	8001014 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LedYellow_Pin, LedYellow);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	785b      	ldrb	r3, [r3, #1]
 8000410:	461a      	mov	r2, r3
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f000 fdfc 	bl	8001014 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LedGreen_Pin, LedGreen);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	789b      	ldrb	r3, [r3, #2]
 8000420:	461a      	mov	r2, r3
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000428:	f000 fdf4 	bl	8001014 <HAL_GPIO_WritePin>
    HAL_Delay(timerValue);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 fb10 	bl	8000a54 <HAL_Delay>
    //WAIT count == timerValue; count++
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <_ZN15LightController8YellowONEi>:

void LightController::YellowON(int timerValue)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
    LedRed = GPIO_PIN_RESET;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
    LedYellow = GPIO_PIN_SET;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2201      	movs	r2, #1
 8000450:	705a      	strb	r2, [r3, #1]
    LedGreen = GPIO_PIN_RESET;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2200      	movs	r2, #0
 8000456:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(GPIOA, LedRed_Pin, LedRed);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	461a      	mov	r2, r3
 800045e:	2120      	movs	r1, #32
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f000 fdd6 	bl	8001014 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LedYellow_Pin, LedYellow);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	785b      	ldrb	r3, [r3, #1]
 800046c:	461a      	mov	r2, r3
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f000 fdce 	bl	8001014 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LedGreen_Pin, LedGreen);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	789b      	ldrb	r3, [r3, #2]
 800047c:	461a      	mov	r2, r3
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000484:	f000 fdc6 	bl	8001014 <HAL_GPIO_WritePin>
    HAL_Delay(timerValue);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fae2 	bl	8000a54 <HAL_Delay>
    //WAIT count == timerValue; count++
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <_ZN15LightController7GreenONEi>:

void LightController::GreenON(int timerValue)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
    LedRed = GPIO_PIN_RESET;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
    LedYellow = GPIO_PIN_RESET;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2200      	movs	r2, #0
 80004ac:	705a      	strb	r2, [r3, #1]
    LedGreen = GPIO_PIN_SET;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2201      	movs	r2, #1
 80004b2:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(GPIOA, LedRed_Pin, LedRed);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	2120      	movs	r1, #32
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f000 fda8 	bl	8001014 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LedYellow_Pin, LedYellow);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	785b      	ldrb	r3, [r3, #1]
 80004c8:	461a      	mov	r2, r3
 80004ca:	2140      	movs	r1, #64	; 0x40
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f000 fda0 	bl	8001014 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LedGreen_Pin, LedGreen);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	789b      	ldrb	r3, [r3, #2]
 80004d8:	461a      	mov	r2, r3
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e0:	f000 fd98 	bl	8001014 <HAL_GPIO_WritePin>
	HAL_Delay(timerValue);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fab4 	bl	8000a54 <HAL_Delay>
    //WAIT count == timerValue; count++
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <_ZN15LightController7TurnOFFEi>:

void LightController::TurnOFF(int timerValue)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
    LedRed = GPIO_PIN_RESET;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
    LedYellow = GPIO_PIN_RESET;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	705a      	strb	r2, [r3, #1]
    LedGreen = GPIO_PIN_RESET;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2200      	movs	r2, #0
 800050e:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(GPIOA, LedRed_Pin, LedRed);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	2120      	movs	r1, #32
 8000518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051c:	f000 fd7a 	bl	8001014 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LedYellow_Pin, LedYellow);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	785b      	ldrb	r3, [r3, #1]
 8000524:	461a      	mov	r2, r3
 8000526:	2140      	movs	r1, #64	; 0x40
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f000 fd72 	bl	8001014 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LedGreen_Pin, LedGreen);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	789b      	ldrb	r3, [r3, #2]
 8000534:	461a      	mov	r2, r3
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053c:	f000 fd6a 	bl	8001014 <HAL_GPIO_WritePin>
	HAL_Delay(timerValue);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fa86 	bl	8000a54 <HAL_Delay>
    //WAIT count == timerValue; count++
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fa08 	bl	800096a <HAL_Init>

  /* USER CODE BEGIN Init */

  	bool phase = DAY;
 800055a:	2300      	movs	r3, #0
 800055c:	77fb      	strb	r3, [r7, #31]
	LightController lightController;
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff28 	bl	80003b8 <_ZN15LightControllerC1Ev>
	ItalianTrafficLight italianTrafficLight(&lightController);
 8000568:	f107 021c 	add.w	r2, r7, #28
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fecb 	bl	800030e <_ZN19ItalianTrafficLightC1EP15LightController>
	italianTrafficLight.setStatus(RED);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fed4 	bl	800032c <_ZN19ItalianTrafficLight9setStatusEi>
	BlinkingTrafficLight blinkingTrafficLight(&lightController);
 8000584:	f107 021c 	add.w	r2, r7, #28
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	4611      	mov	r1, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe1a 	bl	80001c8 <_ZN20BlinkingTrafficLightC1EP15LightController>
	blinkingTrafficLight.setStatus(OFF);
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2104      	movs	r1, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe23 	bl	80001e6 <_ZN20BlinkingTrafficLight9setStatusEi>
	Controller controller(&italianTrafficLight, &blinkingTrafficLight);
 80005a0:	f107 020c 	add.w	r2, r7, #12
 80005a4:	f107 0114 	add.w	r1, r7, #20
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fe5e 	bl	800026c <_ZN10ControllerC1EP19ItalianTrafficLightP20BlinkingTrafficLight>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f812 	bl	80005d8 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */

  HAL_GPIO_WritePin(GPIOA, LedRed_Pin|LedYellow_Pin|LedGreen_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	21e0      	movs	r1, #224	; 0xe0
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f000 fd2a 	bl	8001014 <HAL_GPIO_WritePin>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f8a8 	bl	8000714 <_ZL12MX_GPIO_Initv>
  MX_TIM16_Init();
 80005c4:	f000 f87a 	bl	80006bc <_ZL13MX_TIM16_Initv>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  controller.start(phase);
 80005c8:	7ffa      	ldrb	r2, [r7, #31]
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fe5f 	bl	8000292 <_ZN10Controller5startEi>
 80005d4:	e7f8      	b.n	80005c8 <main+0x78>
	...

080005d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fde8 	bl	80021bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f000 fd3f 	bl	8001080 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf14      	ite	ne
 8000608:	2301      	movne	r3, #1
 800060a:	2300      	moveq	r3, #0
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000612:	f000 f8cb 	bl	80007ac <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000616:	f000 fd15 	bl	8001044 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800061a:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <_Z18SystemClock_Configv+0xe0>)
 800061c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000620:	4a25      	ldr	r2, [pc, #148]	; (80006b8 <_Z18SystemClock_Configv+0xe0>)
 8000622:	f023 0318 	bic.w	r3, r3, #24
 8000626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800062a:	2314      	movs	r3, #20
 800062c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800062e:	2301      	movs	r3, #1
 8000630:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000632:	2301      	movs	r3, #1
 8000634:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800063a:	2360      	movs	r3, #96	; 0x60
 800063c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000642:	2301      	movs	r3, #1
 8000644:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800064a:	2328      	movs	r3, #40	; 0x28
 800064c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064e:	2307      	movs	r3, #7
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fd64 	bl	800112c <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	bf14      	ite	ne
 800066a:	2301      	movne	r3, #1
 800066c:	2300      	moveq	r3, #0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000674:	f000 f89a 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	2104      	movs	r1, #4
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f931 	bl	80018f8 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	bf14      	ite	ne
 800069c:	2301      	movne	r3, #1
 800069e:	2300      	moveq	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80006a6:	f000 f881 	bl	80007ac <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006aa:	f001 faf3 	bl	8001c94 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006ae:	bf00      	nop
 80006b0:	3758      	adds	r7, #88	; 0x58
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <_ZL13MX_TIM16_Initv+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <_ZL13MX_TIM16_Initv+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000 - 1;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <_ZL13MX_TIM16_Initv+0x50>)
 80006c8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80006cc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <_ZL13MX_TIM16_Initv+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536 - 1;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <_ZL13MX_TIM16_Initv+0x50>)
 80006d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006da:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <_ZL13MX_TIM16_Initv+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <_ZL13MX_TIM16_Initv+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <_ZL13MX_TIM16_Initv+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <_ZL13MX_TIM16_Initv+0x50>)
 80006f0:	f001 fae0 	bl	8001cb4 <HAL_TIM_Base_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <_ZL13MX_TIM16_Initv+0x4c>
  {
    Error_Handler();
 8000704:	f000 f852 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000028 	.word	0x20000028
 8000710:	40014400 	.word	0x40014400

08000714 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <_ZL12MX_GPIO_Initv+0x94>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <_ZL12MX_GPIO_Initv+0x94>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <_ZL12MX_GPIO_Initv+0x94>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <_ZL12MX_GPIO_Initv+0x94>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <_ZL12MX_GPIO_Initv+0x94>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <_ZL12MX_GPIO_Initv+0x94>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedRed_Pin|LedYellow_Pin|LedGreen_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	21e0      	movs	r1, #224	; 0xe0
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f000 fc57 	bl	8001014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BtnmChangePhase_Pin */
  GPIO_InitStruct.Pin = BtnChangePhase_Pin;
 8000766:	2310      	movs	r3, #16
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BtnChangePhase_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f000 faa0 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LedRed_Pin LedYellow_Pin LedGreen_Pin */
  GPIO_InitStruct.Pin = LedRed_Pin|LedYellow_Pin|LedGreen_Pin;
 8000780:	23e0      	movs	r3, #224	; 0xe0
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f000 fa91 	bl	8000cc0 <HAL_GPIO_Init>

}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x44>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x44>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6593      	str	r3, [r2, #88]	; 0x58
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <HAL_TIM_Base_MspInit+0x44>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d113      	bne.n	800083a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <HAL_TIM_Base_MspInit+0x48>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <HAL_TIM_Base_MspInit+0x48>)
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	6613      	str	r3, [r2, #96]	; 0x60
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_TIM_Base_MspInit+0x48>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	210f      	movs	r1, #15
 800082e:	2019      	movs	r0, #25
 8000830:	f000 fa0f 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000834:	2019      	movs	r0, #25
 8000836:	f000 fa28 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40014400 	.word	0x40014400
 8000848:	40021000 	.word	0x40021000

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000898:	f000 f8bc 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80008a6:	f001 fa5c 	bl	8001d62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000028 	.word	0x20000028

080008b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <SystemInit+0x5c>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <SystemInit+0x5c>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <SystemInit+0x60>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a11      	ldr	r2, [pc, #68]	; (8000914 <SystemInit+0x60>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <SystemInit+0x60>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <SystemInit+0x60>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <SystemInit+0x60>)
 80008e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <SystemInit+0x60>)
 80008ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <SystemInit+0x60>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <SystemInit+0x60>)
 80008f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SystemInit+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00
 8000914:	40021000 	.word	0x40021000

08000918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000950 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800091c:	f7ff ffca 	bl	80008b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000920:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000922:	e003      	b.n	800092c <LoopCopyDataInit>

08000924 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000926:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000928:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800092a:	3104      	adds	r1, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800092c:	480a      	ldr	r0, [pc, #40]	; (8000958 <LoopForever+0xa>)
	ldr	r3, =_edata
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000930:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000932:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000934:	d3f6      	bcc.n	8000924 <CopyDataInit>
	ldr	r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000938:	e002      	b.n	8000940 <LoopFillZerobss>

0800093a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800093a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800093c:	f842 3b04 	str.w	r3, [r2], #4

08000940 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <LoopForever+0x16>)
	cmp	r2, r3
 8000942:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000944:	d3f9      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000946:	f001 fc15 	bl	8002174 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800094a:	f7ff fe01 	bl	8000550 <main>

0800094e <LoopForever>:

LoopForever:
    b LoopForever
 800094e:	e7fe      	b.n	800094e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000950:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000954:	0800222c 	.word	0x0800222c
	ldr	r0, =_sdata
 8000958:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800095c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000960:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000964:	20000078 	.word	0x20000078

08000968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_2_IRQHandler>

0800096a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f961 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f80e 	bl	800099c <HAL_InitTick>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	e001      	b.n	8000990 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098c:	f7ff ff14 	bl	80007b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000990:	79fb      	ldrb	r3, [r7, #7]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_InitTick+0x6c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d023      	beq.n	80009f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_InitTick+0x70>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_InitTick+0x6c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f96d 	bl	8000ca6 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10f      	bne.n	80009f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d809      	bhi.n	80009ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f937 	bl	8000c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_InitTick+0x74>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	e007      	b.n	80009fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e004      	b.n	80009fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e001      	b.n	80009fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000074 	.word	0x20000074

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000074 	.word	0x20000074

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff8e 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff29 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff3e 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff8e 	bl	8000b90 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff31 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e17f      	b.n	8000fd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 8171 	beq.w	8000fca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d00b      	beq.n	8000d08 <HAL_GPIO_Init+0x48>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d007      	beq.n	8000d08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cfc:	2b11      	cmp	r3, #17
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b12      	cmp	r3, #18
 8000d06:	d130      	bne.n	8000d6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	f003 0201 	and.w	r2, r3, #1
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d118      	bne.n	8000da8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	f003 0201 	and.w	r2, r3, #1
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x128>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b12      	cmp	r3, #18
 8000de6:	d123      	bne.n	8000e30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	6939      	ldr	r1, [r7, #16]
 8000e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0203 	and.w	r2, r3, #3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 80ac 	beq.w	8000fca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b5f      	ldr	r3, [pc, #380]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a5e      	ldr	r2, [pc, #376]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b5c      	ldr	r3, [pc, #368]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e8a:	4a5a      	ldr	r2, [pc, #360]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eb4:	d025      	beq.n	8000f02 <HAL_GPIO_Init+0x242>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	; (8000ff8 <HAL_GPIO_Init+0x338>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d01f      	beq.n	8000efe <HAL_GPIO_Init+0x23e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4e      	ldr	r2, [pc, #312]	; (8000ffc <HAL_GPIO_Init+0x33c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d019      	beq.n	8000efa <HAL_GPIO_Init+0x23a>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4d      	ldr	r2, [pc, #308]	; (8001000 <HAL_GPIO_Init+0x340>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d013      	beq.n	8000ef6 <HAL_GPIO_Init+0x236>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4c      	ldr	r2, [pc, #304]	; (8001004 <HAL_GPIO_Init+0x344>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d00d      	beq.n	8000ef2 <HAL_GPIO_Init+0x232>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4b      	ldr	r2, [pc, #300]	; (8001008 <HAL_GPIO_Init+0x348>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d007      	beq.n	8000eee <HAL_GPIO_Init+0x22e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4a      	ldr	r2, [pc, #296]	; (800100c <HAL_GPIO_Init+0x34c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d101      	bne.n	8000eea <HAL_GPIO_Init+0x22a>
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	e00c      	b.n	8000f04 <HAL_GPIO_Init+0x244>
 8000eea:	2307      	movs	r3, #7
 8000eec:	e00a      	b.n	8000f04 <HAL_GPIO_Init+0x244>
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e008      	b.n	8000f04 <HAL_GPIO_Init+0x244>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x244>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x244>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x244>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x244>
 8000f02:	2300      	movs	r3, #0
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	f002 0203 	and.w	r2, r2, #3
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f14:	4937      	ldr	r1, [pc, #220]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <HAL_GPIO_Init+0x350>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f46:	4a32      	ldr	r2, [pc, #200]	; (8001010 <HAL_GPIO_Init+0x350>)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	; (8001010 <HAL_GPIO_Init+0x350>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <HAL_GPIO_Init+0x350>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <HAL_GPIO_Init+0x350>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_GPIO_Init+0x350>)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_GPIO_Init+0x350>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <HAL_GPIO_Init+0x350>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f47f ae78 	bne.w	8000cd0 <HAL_GPIO_Init+0x10>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	371c      	adds	r7, #28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	48000800 	.word	0x48000800
 8001000:	48000c00 	.word	0x48000c00
 8001004:	48001000 	.word	0x48001000
 8001008:	48001400 	.word	0x48001400
 800100c:	48001800 	.word	0x48001800
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001030:	e002      	b.n	8001038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40007000 	.word	0x40007000

08001064 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <HAL_PWREx_GetVoltageRange+0x18>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40007000 	.word	0x40007000

08001080 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800108e:	d130      	bne.n	80010f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800109c:	d038      	beq.n	8001110 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2232      	movs	r2, #50	; 0x32
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	0c9b      	lsrs	r3, r3, #18
 80010c0:	3301      	adds	r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010c4:	e002      	b.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d8:	d102      	bne.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f2      	bne.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ec:	d110      	bne.n	8001110 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e00f      	b.n	8001112 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010fe:	d007      	beq.n	8001110 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001108:	4a05      	ldr	r2, [pc, #20]	; (8001120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800110e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40007000 	.word	0x40007000
 8001124:	20000000 	.word	0x20000000
 8001128:	431bde83 	.word	0x431bde83

0800112c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e3d4      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800113e:	4ba1      	ldr	r3, [pc, #644]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001148:	4b9e      	ldr	r3, [pc, #632]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80e4 	beq.w	8001328 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <HAL_RCC_OscConfig+0x4a>
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	f040 808b 	bne.w	8001284 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2b01      	cmp	r3, #1
 8001172:	f040 8087 	bne.w	8001284 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001176:	4b93      	ldr	r3, [pc, #588]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_RCC_OscConfig+0x62>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e3ac      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a1a      	ldr	r2, [r3, #32]
 8001192:	4b8c      	ldr	r3, [pc, #560]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d004      	beq.n	80011a8 <HAL_RCC_OscConfig+0x7c>
 800119e:	4b89      	ldr	r3, [pc, #548]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011a6:	e005      	b.n	80011b4 <HAL_RCC_OscConfig+0x88>
 80011a8:	4b86      	ldr	r3, [pc, #536]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80011aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d223      	bcs.n	8001200 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fd09 	bl	8001bd4 <RCC_SetFlashLatencyFromMSIRange>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e38d      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011cc:	4b7d      	ldr	r3, [pc, #500]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a7c      	ldr	r2, [pc, #496]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b7a      	ldr	r3, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4977      	ldr	r1, [pc, #476]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ea:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	4972      	ldr	r1, [pc, #456]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	604b      	str	r3, [r1, #4]
 80011fe:	e025      	b.n	800124c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001200:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a6f      	ldr	r2, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b6d      	ldr	r3, [pc, #436]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	496a      	ldr	r1, [pc, #424]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800121e:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	4965      	ldr	r1, [pc, #404]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d109      	bne.n	800124c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fcc9 	bl	8001bd4 <RCC_SetFlashLatencyFromMSIRange>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e34d      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800124c:	f000 fc36 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001250:	4602      	mov	r2, r0
 8001252:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	495a      	ldr	r1, [pc, #360]	; (80013c8 <HAL_RCC_OscConfig+0x29c>)
 800125e:	5ccb      	ldrb	r3, [r1, r3]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
 8001268:	4a58      	ldr	r2, [pc, #352]	; (80013cc <HAL_RCC_OscConfig+0x2a0>)
 800126a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800126c:	4b58      	ldr	r3, [pc, #352]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fb93 	bl	800099c <HAL_InitTick>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d052      	beq.n	8001326 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	e331      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d032      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001298:	f7ff fbd0 	bl	8000a3c <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a0:	f7ff fbcc 	bl	8000a3c <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e31a      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a40      	ldr	r2, [pc, #256]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	493b      	ldr	r1, [pc, #236]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4936      	ldr	r1, [pc, #216]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
 80012f0:	e01a      	b.n	8001328 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fb9d 	bl	8000a3c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001306:	f7ff fb99 	bl	8000a3c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e2e7      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x1da>
 8001324:	e000      	b.n	8001328 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001326:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d074      	beq.n	800141e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	2b08      	cmp	r3, #8
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x21a>
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d10e      	bne.n	800135e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d10b      	bne.n	800135e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d064      	beq.n	800141c <HAL_RCC_OscConfig+0x2f0>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d160      	bne.n	800141c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e2c4      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x24a>
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 800136e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	e01d      	b.n	80013b2 <HAL_RCC_OscConfig+0x286>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0x26e>
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e00b      	b.n	80013b2 <HAL_RCC_OscConfig+0x286>
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80013a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_RCC_OscConfig+0x298>)
 80013ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d01c      	beq.n	80013f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb3f 	bl	8000a3c <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c0:	e011      	b.n	80013e6 <HAL_RCC_OscConfig+0x2ba>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	080021e4 	.word	0x080021e4
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fb32 	bl	8000a3c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e280      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013e6:	4baf      	ldr	r3, [pc, #700]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x2a8>
 80013f2:	e014      	b.n	800141e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fb22 	bl	8000a3c <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fb1e 	bl	8000a3c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e26c      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800140e:	4ba5      	ldr	r3, [pc, #660]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x2d0>
 800141a:	e000      	b.n	800141e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d060      	beq.n	80014ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b04      	cmp	r3, #4
 800142e:	d005      	beq.n	800143c <HAL_RCC_OscConfig+0x310>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d119      	bne.n	800146a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d116      	bne.n	800146a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800143c:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_OscConfig+0x328>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e249      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b93      	ldr	r3, [pc, #588]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	4990      	ldr	r1, [pc, #576]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001468:	e040      	b.n	80014ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d023      	beq.n	80014ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001472:	4b8c      	ldr	r3, [pc, #560]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a8b      	ldr	r2, [pc, #556]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147e:	f7ff fadd 	bl	8000a3c <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001486:	f7ff fad9 	bl	8000a3c <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e227      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001498:	4b82      	ldr	r3, [pc, #520]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b7f      	ldr	r3, [pc, #508]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	497c      	ldr	r1, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
 80014b8:	e018      	b.n	80014ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ba:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a79      	ldr	r2, [pc, #484]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 80014c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff fab9 	bl	8000a3c <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fab5 	bl	8000a3c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e203      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e0:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d03c      	beq.n	8001572 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01c      	beq.n	800153a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001500:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001506:	4a67      	ldr	r2, [pc, #412]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff fa94 	bl	8000a3c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fa90 	bl	8000a3c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1de      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800152a:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 800152c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0ef      	beq.n	8001518 <HAL_RCC_OscConfig+0x3ec>
 8001538:	e01b      	b.n	8001572 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153a:	4b5a      	ldr	r3, [pc, #360]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 800153c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154a:	f7ff fa77 	bl	8000a3c <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fa73 	bl	8000a3c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e1c1      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001564:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ef      	bne.n	8001552 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80a6 	beq.w	80016cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001584:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10d      	bne.n	80015ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001590:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001594:	4a43      	ldr	r2, [pc, #268]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159a:	6593      	str	r3, [r2, #88]	; 0x58
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a8:	2301      	movs	r3, #1
 80015aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ac:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <HAL_RCC_OscConfig+0x57c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d118      	bne.n	80015ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015b8:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <HAL_RCC_OscConfig+0x57c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a3a      	ldr	r2, [pc, #232]	; (80016a8 <HAL_RCC_OscConfig+0x57c>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c4:	f7ff fa3a 	bl	8000a3c <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015cc:	f7ff fa36 	bl	8000a3c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e184      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_RCC_OscConfig+0x57c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d108      	bne.n	8001604 <HAL_RCC_OscConfig+0x4d8>
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 80015f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f8:	4a2a      	ldr	r2, [pc, #168]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001602:	e024      	b.n	800164e <HAL_RCC_OscConfig+0x522>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d110      	bne.n	800162e <HAL_RCC_OscConfig+0x502>
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 800160e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001612:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 800161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001622:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800162c:	e00f      	b.n	800164e <HAL_RCC_OscConfig+0x522>
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001634:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001644:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001646:	f023 0304 	bic.w	r3, r3, #4
 800164a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d016      	beq.n	8001684 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff f9f1 	bl	8000a3c <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff f9ed 	bl	8000a3c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e139      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x578>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ed      	beq.n	800165e <HAL_RCC_OscConfig+0x532>
 8001682:	e01a      	b.n	80016ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff f9da 	bl	8000a3c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800168a:	e00f      	b.n	80016ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff f9d6 	bl	8000a3c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d906      	bls.n	80016ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e122      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ac:	4b90      	ldr	r3, [pc, #576]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1e8      	bne.n	800168c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ba:	7ffb      	ldrb	r3, [r7, #31]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c0:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	4a8a      	ldr	r2, [pc, #552]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80016c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8108 	beq.w	80018e6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	2b02      	cmp	r3, #2
 80016dc:	f040 80d0 	bne.w	8001880 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016e0:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 0203 	and.w	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d130      	bne.n	8001756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	3b01      	subs	r3, #1
 8001700:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d127      	bne.n	8001756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d11f      	bne.n	8001756 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001720:	2a07      	cmp	r2, #7
 8001722:	bf14      	ite	ne
 8001724:	2201      	movne	r2, #1
 8001726:	2200      	moveq	r2, #0
 8001728:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800172a:	4293      	cmp	r3, r2
 800172c:	d113      	bne.n	8001756 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001738:	085b      	lsrs	r3, r3, #1
 800173a:	3b01      	subs	r3, #1
 800173c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d109      	bne.n	8001756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	3b01      	subs	r3, #1
 8001750:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d06e      	beq.n	8001834 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	2b0c      	cmp	r3, #12
 800175a:	d069      	beq.n	8001830 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800175c:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001768:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b7      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001778:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a5c      	ldr	r2, [pc, #368]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 800177e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001784:	f7ff f95a 	bl	8000a3c <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f956 	bl	8000a3c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0a4      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179e:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017aa:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <HAL_RCC_OscConfig+0x7c8>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017ba:	3a01      	subs	r2, #1
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	4311      	orrs	r1, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017c4:	0212      	lsls	r2, r2, #8
 80017c6:	4311      	orrs	r1, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017cc:	0852      	lsrs	r2, r2, #1
 80017ce:	3a01      	subs	r2, #1
 80017d0:	0552      	lsls	r2, r2, #21
 80017d2:	4311      	orrs	r1, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017d8:	0852      	lsrs	r2, r2, #1
 80017da:	3a01      	subs	r2, #1
 80017dc:	0652      	lsls	r2, r2, #25
 80017de:	4311      	orrs	r1, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017e4:	0912      	lsrs	r2, r2, #4
 80017e6:	0452      	lsls	r2, r2, #17
 80017e8:	430a      	orrs	r2, r1
 80017ea:	4941      	ldr	r1, [pc, #260]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017f0:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a3e      	ldr	r2, [pc, #248]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80017f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017fc:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4a3b      	ldr	r2, [pc, #236]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 8001802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001808:	f7ff f918 	bl	8000a3c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff f914 	bl	8000a3c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e062      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001822:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800182e:	e05a      	b.n	80018e6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e059      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001834:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d152      	bne.n	80018e6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001840:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2a      	ldr	r2, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 8001852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001858:	f7ff f8f0 	bl	8000a3c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f8ec 	bl	8000a3c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e03a      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x734>
 800187e:	e032      	b.n	80018e6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d02d      	beq.n	80018e2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 800188c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001890:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80018a4:	f023 0303 	bic.w	r3, r3, #3
 80018a8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80018b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff f8bf 	bl	8000a3c <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff f8bb 	bl	8000a3c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e009      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_OscConfig+0x7c4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x796>
 80018e0:	e001      	b.n	80018e6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	f99d808c 	.word	0xf99d808c

080018f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0c8      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d910      	bls.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0207 	bic.w	r2, r3, #7
 8001922:	4961      	ldr	r1, [pc, #388]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b5f      	ldr	r3, [pc, #380]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0b0      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d04c      	beq.n	80019e2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d107      	bne.n	8001960 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001950:	4b56      	ldr	r3, [pc, #344]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d121      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e09e      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d107      	bne.n	8001978 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001968:	4b50      	ldr	r3, [pc, #320]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d115      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e092      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001980:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d109      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e086      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001990:	4b46      	ldr	r3, [pc, #280]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e07e      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019a0:	4b42      	ldr	r3, [pc, #264]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 0203 	bic.w	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	493f      	ldr	r1, [pc, #252]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b2:	f7ff f843 	bl	8000a3c <HAL_GetTick>
 80019b6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ba:	f7ff f83f 	bl	8000a3c <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e066      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d0:	4b36      	ldr	r3, [pc, #216]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 020c 	and.w	r2, r3, #12
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	429a      	cmp	r2, r3
 80019e0:	d1eb      	bne.n	80019ba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d008      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	492c      	ldr	r1, [pc, #176]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d210      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 0207 	bic.w	r2, r3, #7
 8001a16:	4924      	ldr	r1, [pc, #144]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e036      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4918      	ldr	r1, [pc, #96]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4910      	ldr	r1, [pc, #64]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a6e:	f000 f825 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_ClockConfig+0x1b4>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	5ccb      	ldrb	r3, [r1, r3]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe ff82 	bl	800099c <HAL_InitTick>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	080021e4 	.word	0x080021e4
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aca:	4b3e      	ldr	r3, [pc, #248]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d121      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d11e      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e005      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b18:	4a2b      	ldr	r2, [pc, #172]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	e004      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d134      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d003      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0xac>
 8001b60:	e005      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b64:	617b      	str	r3, [r7, #20]
      break;
 8001b66:	e005      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b6a:	617b      	str	r3, [r7, #20]
      break;
 8001b6c:	e002      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	617b      	str	r3, [r7, #20]
      break;
 8001b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	3301      	adds	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	fb02 f203 	mul.w	r2, r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	0e5b      	lsrs	r3, r3, #25
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	080021f4 	.word	0x080021f4
 8001bcc:	00f42400 	.word	0x00f42400
 8001bd0:	007a1200 	.word	0x007a1200

08001bd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bec:	f7ff fa3a 	bl	8001064 <HAL_PWREx_GetVoltageRange>
 8001bf0:	6178      	str	r0, [r7, #20]
 8001bf2:	e014      	b.n	8001c1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c0c:	f7ff fa2a 	bl	8001064 <HAL_PWREx_GetVoltageRange>
 8001c10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c24:	d10b      	bne.n	8001c3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b80      	cmp	r3, #128	; 0x80
 8001c2a:	d919      	bls.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2ba0      	cmp	r3, #160	; 0xa0
 8001c30:	d902      	bls.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c32:	2302      	movs	r3, #2
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	e013      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c38:	2301      	movs	r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	e010      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b80      	cmp	r3, #128	; 0x80
 8001c42:	d902      	bls.n	8001c4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c44:	2303      	movs	r3, #3
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	e00a      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b80      	cmp	r3, #128	; 0x80
 8001c4e:	d102      	bne.n	8001c56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c50:	2302      	movs	r3, #2
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	e004      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b70      	cmp	r3, #112	; 0x70
 8001c5a:	d101      	bne.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 0207 	bic.w	r2, r3, #7
 8001c68:	4909      	ldr	r1, [pc, #36]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d001      	beq.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40022000 	.word	0x40022000

08001c94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e049      	b.n	8001d5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fd90 	bl	8000800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f000 f986 	bl	8002004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d122      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d11b      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f06f 0202 	mvn.w	r2, #2
 8001d8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f90f 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001daa:	e005      	b.n	8001db8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f901 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f912 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d122      	bne.n	8001e12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d11b      	bne.n	8001e12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0204 	mvn.w	r2, #4
 8001de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f8e5 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001dfe:	e005      	b.n	8001e0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f8d7 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8e8 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d122      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d11b      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0208 	mvn.w	r2, #8
 8001e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f8bb 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e52:	e005      	b.n	8001e60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8ad 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8be 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b10      	cmp	r3, #16
 8001e72:	d122      	bne.n	8001eba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d11b      	bne.n	8001eba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f06f 0210 	mvn.w	r2, #16
 8001e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2208      	movs	r2, #8
 8001e90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f891 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001ea6:	e005      	b.n	8001eb4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f883 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f894 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10e      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d107      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f06f 0201 	mvn.w	r2, #1
 8001ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f85d 	bl	8001fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef0:	2b80      	cmp	r3, #128	; 0x80
 8001ef2:	d10e      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	2b80      	cmp	r3, #128	; 0x80
 8001f00:	d107      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f91d 	bl	800214c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f20:	d10e      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b80      	cmp	r3, #128	; 0x80
 8001f2e:	d107      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f910 	bl	8002160 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f58:	2b40      	cmp	r3, #64	; 0x40
 8001f5a:	d107      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f842 	bl	8001ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	d10e      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d107      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0220 	mvn.w	r2, #32
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8d0 	bl	8002138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	; (8002118 <TIM_Base_SetConfig+0x114>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002022:	d00f      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3d      	ldr	r2, [pc, #244]	; (800211c <TIM_Base_SetConfig+0x118>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00b      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3b      	ldr	r2, [pc, #236]	; (8002124 <TIM_Base_SetConfig+0x120>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3a      	ldr	r2, [pc, #232]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <TIM_Base_SetConfig+0x114>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <TIM_Base_SetConfig+0x9a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d01b      	beq.n	800209e <TIM_Base_SetConfig+0x9a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2c      	ldr	r2, [pc, #176]	; (800211c <TIM_Base_SetConfig+0x118>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d017      	beq.n	800209e <TIM_Base_SetConfig+0x9a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <TIM_Base_SetConfig+0x9a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <TIM_Base_SetConfig+0x120>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00f      	beq.n	800209e <TIM_Base_SetConfig+0x9a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0x9a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a28      	ldr	r2, [pc, #160]	; (800212c <TIM_Base_SetConfig+0x128>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0x9a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <TIM_Base_SetConfig+0x12c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0x9a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <TIM_Base_SetConfig+0x130>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <TIM_Base_SetConfig+0x114>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d00f      	beq.n	80020fc <TIM_Base_SetConfig+0xf8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <TIM_Base_SetConfig+0x124>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00b      	beq.n	80020fc <TIM_Base_SetConfig+0xf8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <TIM_Base_SetConfig+0x128>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d007      	beq.n	80020fc <TIM_Base_SetConfig+0xf8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <TIM_Base_SetConfig+0x12c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0xf8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <TIM_Base_SetConfig+0x130>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d103      	bne.n	8002104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40012c00 	.word	0x40012c00
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40013400 	.word	0x40013400
 800212c:	40014000 	.word	0x40014000
 8002130:	40014400 	.word	0x40014400
 8002134:	40014800 	.word	0x40014800

08002138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <__libc_init_array>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	4d0d      	ldr	r5, [pc, #52]	; (80021ac <__libc_init_array+0x38>)
 8002178:	4c0d      	ldr	r4, [pc, #52]	; (80021b0 <__libc_init_array+0x3c>)
 800217a:	1b64      	subs	r4, r4, r5
 800217c:	10a4      	asrs	r4, r4, #2
 800217e:	2600      	movs	r6, #0
 8002180:	42a6      	cmp	r6, r4
 8002182:	d109      	bne.n	8002198 <__libc_init_array+0x24>
 8002184:	4d0b      	ldr	r5, [pc, #44]	; (80021b4 <__libc_init_array+0x40>)
 8002186:	4c0c      	ldr	r4, [pc, #48]	; (80021b8 <__libc_init_array+0x44>)
 8002188:	f000 f820 	bl	80021cc <_init>
 800218c:	1b64      	subs	r4, r4, r5
 800218e:	10a4      	asrs	r4, r4, #2
 8002190:	2600      	movs	r6, #0
 8002192:	42a6      	cmp	r6, r4
 8002194:	d105      	bne.n	80021a2 <__libc_init_array+0x2e>
 8002196:	bd70      	pop	{r4, r5, r6, pc}
 8002198:	f855 3b04 	ldr.w	r3, [r5], #4
 800219c:	4798      	blx	r3
 800219e:	3601      	adds	r6, #1
 80021a0:	e7ee      	b.n	8002180 <__libc_init_array+0xc>
 80021a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a6:	4798      	blx	r3
 80021a8:	3601      	adds	r6, #1
 80021aa:	e7f2      	b.n	8002192 <__libc_init_array+0x1e>
 80021ac:	08002224 	.word	0x08002224
 80021b0:	08002224 	.word	0x08002224
 80021b4:	08002224 	.word	0x08002224
 80021b8:	08002228 	.word	0x08002228

080021bc <memset>:
 80021bc:	4402      	add	r2, r0
 80021be:	4603      	mov	r3, r0
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d100      	bne.n	80021c6 <memset+0xa>
 80021c4:	4770      	bx	lr
 80021c6:	f803 1b01 	strb.w	r1, [r3], #1
 80021ca:	e7f9      	b.n	80021c0 <memset+0x4>

080021cc <_init>:
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ce:	bf00      	nop
 80021d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d2:	bc08      	pop	{r3}
 80021d4:	469e      	mov	lr, r3
 80021d6:	4770      	bx	lr

080021d8 <_fini>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	bf00      	nop
 80021dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021de:	bc08      	pop	{r3}
 80021e0:	469e      	mov	lr, r3
 80021e2:	4770      	bx	lr
