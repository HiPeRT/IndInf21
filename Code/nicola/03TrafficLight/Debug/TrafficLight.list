
TrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001d88  08001d88  00011d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dc8  08001dc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001dc8  08001dc8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dc8  08001dc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dc8  08001dc8  00011dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dcc  08001dcc  00011dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001ddc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001ddc  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d3a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002169  00000000  00000000  00029d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002bee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002c708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c9f  00000000  00000000  0002ce18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2cb  00000000  00000000  00053ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df9fc  00000000  00000000  0005dd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d77e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d40  00000000  00000000  0013d7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001d70 	.word	0x08001d70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001d70 	.word	0x08001d70

080001c8 <_ZN20BlinkingTrafficLightC1EP15LightControllerP5Timer>:
#include "../Inc/BlinkingTrafficLight.hpp"

BlinkingTrafficLight::BlinkingTrafficLight(LightController *lightController, Timer *timer)
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
{
    lightCtrl = lightController;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	68ba      	ldr	r2, [r7, #8]
 80001d8:	605a      	str	r2, [r3, #4]
    timerPt = timer;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	609a      	str	r2, [r3, #8]
}
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	4618      	mov	r0, r3
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <_ZN20BlinkingTrafficLight9setStatusEi>:

void BlinkingTrafficLight::setStatus(int status)
{
 80001ee:	b480      	push	{r7}
 80001f0:	b083      	sub	sp, #12
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
 80001f6:	6039      	str	r1, [r7, #0]
    currentStatus = status;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	683a      	ldr	r2, [r7, #0]
 80001fc:	601a      	str	r2, [r3, #0]
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr

0800020a <_ZN20BlinkingTrafficLight10startCycleEv>:
{
    return currentStatus;
}

void BlinkingTrafficLight::startCycle()
{
 800020a:	b580      	push	{r7, lr}
 800020c:	b082      	sub	sp, #8
 800020e:	af00      	add	r7, sp, #0
 8000210:	6078      	str	r0, [r7, #4]
    switch (currentStatus)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2b02      	cmp	r3, #2
 8000218:	d01a      	beq.n	8000250 <_ZN20BlinkingTrafficLight10startCycleEv+0x46>
 800021a:	2b04      	cmp	r3, #4
 800021c:	d131      	bne.n	8000282 <_ZN20BlinkingTrafficLight10startCycleEv+0x78>
    {
    case OFF:
        lightCtrl->TurnOFF();
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f99c 	bl	8000560 <_ZN15LightController7TurnOFFEv>
        if(timerPt->wait(TIMER))
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fa21 	bl	8000678 <_ZN5Timer4waitEm>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d024      	beq.n	8000286 <_ZN20BlinkingTrafficLight10startCycleEv+0x7c>
		{
        	setStatus(COLOR);
 800023c:	2102      	movs	r1, #2
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f7ff ffd5 	bl	80001ee <_ZN20BlinkingTrafficLight9setStatusEi>
        	timerPt->init();
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fa07 	bl	800065c <_ZN5Timer4initEv>
		}
        break;
 800024e:	e01a      	b.n	8000286 <_ZN20BlinkingTrafficLight10startCycleEv+0x7c>
    case COLOR:
        lightCtrl->YellowON();
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f931 	bl	80004bc <_ZN15LightController8YellowONEv>
        if(timerPt->wait(TIMER))
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fa08 	bl	8000678 <_ZN5Timer4waitEm>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d00d      	beq.n	800028a <_ZN20BlinkingTrafficLight10startCycleEv+0x80>
		{
        	setStatus(OFF);
 800026e:	2104      	movs	r1, #4
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ffbc 	bl	80001ee <_ZN20BlinkingTrafficLight9setStatusEi>
        	timerPt->init();
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f9ee 	bl	800065c <_ZN5Timer4initEv>
		}
        break;
 8000280:	e003      	b.n	800028a <_ZN20BlinkingTrafficLight10startCycleEv+0x80>
    
    default:
        break;
 8000282:	bf00      	nop
 8000284:	e002      	b.n	800028c <_ZN20BlinkingTrafficLight10startCycleEv+0x82>
        break;
 8000286:	bf00      	nop
 8000288:	e000      	b.n	800028c <_ZN20BlinkingTrafficLight10startCycleEv+0x82>
        break;
 800028a:	bf00      	nop
    }
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <_ZN10ControllerC1EP19ItalianTrafficLightP20BlinkingTrafficLight>:
#include "../Inc/Controller.hpp"

Controller::Controller(ItalianTrafficLight *italianTrafficLight, BlinkingTrafficLight *blinkingTrafficLight)
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	607a      	str	r2, [r7, #4]
{
    italianTL = italianTrafficLight;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	601a      	str	r2, [r3, #0]
    blinkingTL = blinkingTrafficLight;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	605a      	str	r2, [r3, #4]
}
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	4618      	mov	r0, r3
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr

080002ba <_ZN10Controller5startEb>:

void Controller::start(bool phase)
{
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b082      	sub	sp, #8
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
 80002c2:	460b      	mov	r3, r1
 80002c4:	70fb      	strb	r3, [r7, #3]
    switch (phase)
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d002      	beq.n	80002d2 <_ZN10Controller5startEb+0x18>
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d004      	beq.n	80002da <_ZN10Controller5startEb+0x20>
    case NIGHT:
        night();
        break;
    
    default:
        break;
 80002d0:	e007      	b.n	80002e2 <_ZN10Controller5startEb+0x28>
        day();
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f000 f809 	bl	80002ea <_ZN10Controller3dayEv>
        break;
 80002d8:	e003      	b.n	80002e2 <_ZN10Controller5startEb+0x28>
        night();
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 f818 	bl	8000310 <_ZN10Controller5nightEv>
        break;
 80002e0:	bf00      	nop
    }
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <_ZN10Controller3dayEv>:

void Controller::day() 
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b082      	sub	sp, #8
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
    blinkingTL->setStatus(OFF);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	2104      	movs	r1, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff78 	bl	80001ee <_ZN20BlinkingTrafficLight9setStatusEi>
    italianTL->startCycle();
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f838 	bl	8000378 <_ZN19ItalianTrafficLight10startCycleEv>
}
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <_ZN10Controller5nightEv>:

void Controller::night()
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
    italianTL->setStatus(RED);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f81c 	bl	800035c <_ZN19ItalianTrafficLight9setStatusEi>
    blinkingTL->startCycle();
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff6e 	bl	800020a <_ZN20BlinkingTrafficLight10startCycleEv>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <_ZN19ItalianTrafficLightC1EP15LightControllerP5Timer>:
#include "../Inc/ItalianTrafficLight.hpp"

ItalianTrafficLight::ItalianTrafficLight(LightController *lightController, Timer *timer)
 8000336:	b480      	push	{r7}
 8000338:	b085      	sub	sp, #20
 800033a:	af00      	add	r7, sp, #0
 800033c:	60f8      	str	r0, [r7, #12]
 800033e:	60b9      	str	r1, [r7, #8]
 8000340:	607a      	str	r2, [r7, #4]
{
    lightCtrl = lightController;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	68ba      	ldr	r2, [r7, #8]
 8000346:	605a      	str	r2, [r3, #4]
    timerPt = timer;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	609a      	str	r2, [r3, #8]
}
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4618      	mov	r0, r3
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <_ZN19ItalianTrafficLight9setStatusEi>:

void ItalianTrafficLight::setStatus(int status)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
    currentStatus = status;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	683a      	ldr	r2, [r7, #0]
 800036a:	601a      	str	r2, [r3, #0]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <_ZN19ItalianTrafficLight10startCycleEv>:
{
    return currentStatus;
}

void ItalianTrafficLight::startCycle()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    switch (currentStatus)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b02      	cmp	r3, #2
 8000386:	d038      	beq.n	80003fa <_ZN19ItalianTrafficLight10startCycleEv+0x82>
 8000388:	2b02      	cmp	r3, #2
 800038a:	dc4f      	bgt.n	800042c <_ZN19ItalianTrafficLight10startCycleEv+0xb4>
 800038c:	2b00      	cmp	r3, #0
 800038e:	d002      	beq.n	8000396 <_ZN19ItalianTrafficLight10startCycleEv+0x1e>
 8000390:	2b01      	cmp	r3, #1
 8000392:	d019      	beq.n	80003c8 <_ZN19ItalianTrafficLight10startCycleEv+0x50>
        	timerPt->init();
		}
        break;
    
    default:
        break;
 8000394:	e04a      	b.n	800042c <_ZN19ItalianTrafficLight10startCycleEv+0xb4>
        lightCtrl->RedON();
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f865 	bl	800046a <_ZN15LightController5RedONEv>
        if(timerPt->wait(TIMER1))
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	f241 7170 	movw	r1, #6000	; 0x1770
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f965 	bl	8000678 <_ZN5Timer4waitEm>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d03d      	beq.n	8000430 <_ZN19ItalianTrafficLight10startCycleEv+0xb8>
        	setStatus(GREEN);
 80003b4:	2102      	movs	r1, #2
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f7ff ffd0 	bl	800035c <_ZN19ItalianTrafficLight9setStatusEi>
        	timerPt->init();
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f94b 	bl	800065c <_ZN5Timer4initEv>
        break;
 80003c6:	e033      	b.n	8000430 <_ZN19ItalianTrafficLight10startCycleEv+0xb8>
        lightCtrl->YellowON();
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 f875 	bl	80004bc <_ZN15LightController8YellowONEv>
        if(timerPt->wait(TIMER2))
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 f94c 	bl	8000678 <_ZN5Timer4waitEm>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d026      	beq.n	8000434 <_ZN19ItalianTrafficLight10startCycleEv+0xbc>
        	setStatus(RED);
 80003e6:	2100      	movs	r1, #0
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff ffb7 	bl	800035c <_ZN19ItalianTrafficLight9setStatusEi>
        	timerPt->init();
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f932 	bl	800065c <_ZN5Timer4initEv>
        break;
 80003f8:	e01c      	b.n	8000434 <_ZN19ItalianTrafficLight10startCycleEv+0xbc>
        lightCtrl->GreenON();
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 f885 	bl	800050e <_ZN15LightController7GreenONEv>
        if(timerPt->wait(TIMER1))
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	f241 7170 	movw	r1, #6000	; 0x1770
 800040c:	4618      	mov	r0, r3
 800040e:	f000 f933 	bl	8000678 <_ZN5Timer4waitEm>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d00f      	beq.n	8000438 <_ZN19ItalianTrafficLight10startCycleEv+0xc0>
        	setStatus(YELLOW);
 8000418:	2101      	movs	r1, #1
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ff9e 	bl	800035c <_ZN19ItalianTrafficLight9setStatusEi>
        	timerPt->init();
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f919 	bl	800065c <_ZN5Timer4initEv>
        break;
 800042a:	e005      	b.n	8000438 <_ZN19ItalianTrafficLight10startCycleEv+0xc0>
        break;
 800042c:	bf00      	nop
 800042e:	e004      	b.n	800043a <_ZN19ItalianTrafficLight10startCycleEv+0xc2>
        break;
 8000430:	bf00      	nop
 8000432:	e002      	b.n	800043a <_ZN19ItalianTrafficLight10startCycleEv+0xc2>
        break;
 8000434:	bf00      	nop
 8000436:	e000      	b.n	800043a <_ZN19ItalianTrafficLight10startCycleEv+0xc2>
        break;
 8000438:	bf00      	nop
    }

}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZN15LightControllerC1Ev>:
#include "../Inc/LightController.hpp"

LightController::LightController(){}
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2200      	movs	r2, #0
 8000454:	705a      	strb	r2, [r3, #1]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2200      	movs	r2, #0
 800045a:	709a      	strb	r2, [r3, #2]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <_ZN15LightController5RedONEv>:

void LightController::RedON()
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b082      	sub	sp, #8
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
    LedRed = GPIO_PIN_SET;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2201      	movs	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]
    LedYellow = GPIO_PIN_RESET;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2200      	movs	r2, #0
 800047c:	705a      	strb	r2, [r3, #1]
    LedGreen = GPIO_PIN_RESET;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(GPIOA, LedRed_Pin, LedRed);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	2120      	movs	r1, #32
 800048c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000490:	f000 fdf2 	bl	8001078 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LedYellow_Pin, LedYellow);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	785b      	ldrb	r3, [r3, #1]
 8000498:	461a      	mov	r2, r3
 800049a:	2140      	movs	r1, #64	; 0x40
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f000 fdea 	bl	8001078 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LedGreen_Pin, LedGreen);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	461a      	mov	r2, r3
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b0:	f000 fde2 	bl	8001078 <HAL_GPIO_WritePin>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <_ZN15LightController8YellowONEv>:

void LightController::YellowON()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
    LedRed = GPIO_PIN_RESET;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
    LedYellow = GPIO_PIN_SET;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2201      	movs	r2, #1
 80004ce:	705a      	strb	r2, [r3, #1]
    LedGreen = GPIO_PIN_RESET;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2200      	movs	r2, #0
 80004d4:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(GPIOA, LedRed_Pin, LedRed);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	2120      	movs	r1, #32
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f000 fdc9 	bl	8001078 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LedYellow_Pin, LedYellow);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	785b      	ldrb	r3, [r3, #1]
 80004ea:	461a      	mov	r2, r3
 80004ec:	2140      	movs	r1, #64	; 0x40
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f000 fdc1 	bl	8001078 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LedGreen_Pin, LedGreen);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	461a      	mov	r2, r3
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f000 fdb9 	bl	8001078 <HAL_GPIO_WritePin>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <_ZN15LightController7GreenONEv>:

void LightController::GreenON()
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
    LedRed = GPIO_PIN_RESET;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
    LedYellow = GPIO_PIN_RESET;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2200      	movs	r2, #0
 8000520:	705a      	strb	r2, [r3, #1]
    LedGreen = GPIO_PIN_SET;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2201      	movs	r2, #1
 8000526:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(GPIOA, LedRed_Pin, LedRed);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	2120      	movs	r1, #32
 8000530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000534:	f000 fda0 	bl	8001078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LedYellow_Pin, LedYellow);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	785b      	ldrb	r3, [r3, #1]
 800053c:	461a      	mov	r2, r3
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f000 fd98 	bl	8001078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LedGreen_Pin, LedGreen);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	461a      	mov	r2, r3
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f000 fd90 	bl	8001078 <HAL_GPIO_WritePin>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <_ZN15LightController7TurnOFFEv>:

void LightController::TurnOFF()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    LedRed = GPIO_PIN_RESET;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
    LedYellow = GPIO_PIN_RESET;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2200      	movs	r2, #0
 8000572:	705a      	strb	r2, [r3, #1]
    LedGreen = GPIO_PIN_RESET;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	709a      	strb	r2, [r3, #2]
    HAL_GPIO_WritePin(GPIOA, LedRed_Pin, LedRed);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	461a      	mov	r2, r3
 8000580:	2120      	movs	r1, #32
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f000 fd77 	bl	8001078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LedYellow_Pin, LedYellow);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	461a      	mov	r2, r3
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f000 fd6f 	bl	8001078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LedGreen_Pin, LedGreen);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	789b      	ldrb	r3, [r3, #2]
 800059e:	461a      	mov	r2, r3
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fd67 	bl	8001078 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <_ZN15PhaseControllerC1EPb>:
#include "../Inc/PhaseController.hpp"

PhaseController::PhaseController(bool *phase)
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
{
	currentPhase = phase;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	601a      	str	r2, [r3, #0]
}
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <_ZN15PhaseController11checkButtonEv>:

void PhaseController::checkButton()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) setPhase();
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <_ZN15PhaseController11checkButtonEv+0x30>)
 80005de:	f000 fd33 	bl	8001048 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	bf0c      	ite	eq
 80005e8:	2301      	moveq	r3, #1
 80005ea:	2300      	movne	r3, #0
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <_ZN15PhaseController11checkButtonEv+0x28>
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 f806 	bl	8000604 <_ZN15PhaseController8setPhaseEv>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000800 	.word	0x48000800

08000604 <_ZN15PhaseController8setPhaseEv>:

void PhaseController::setPhase()
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	*currentPhase = !(*currentPhase);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f082 0201 	eor.w	r2, r2, #1
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	701a      	strb	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <_ZN5TimerC1Ev>:
#include "../Inc/Timer.hpp"

Timer::Timer(){}
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <_ZN5Timer6millisEv>:

uint32_t Timer::millis()
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	return uwTick;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <_ZN5Timer6millisEv+0x18>)
 800064a:	681b      	ldr	r3, [r3, #0]
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	20000028 	.word	0x20000028

0800065c <_ZN5Timer4initEv>:

void Timer::init()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	start = millis();
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ffeb 	bl	8000640 <_ZN5Timer6millisEv>
 800066a:	4602      	mov	r2, r0
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	605a      	str	r2, [r3, #4]
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <_ZN5Timer4waitEm>:

bool Timer::wait(uint32_t pauseTime)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	if(millis() >= (start + pauseTime))
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ffdc 	bl	8000640 <_ZN5Timer6millisEv>
 8000688:	4601      	mov	r1, r0
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	4413      	add	r3, r2
 8000692:	4299      	cmp	r1, r3
 8000694:	bf2c      	ite	cs
 8000696:	2301      	movcs	r3, #1
 8000698:	2300      	movcc	r3, #0
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <_ZN5Timer4waitEm+0x2c>
	{
		return true;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e000      	b.n	80006a6 <_ZN5Timer4waitEm+0x2e>
	}
	return false;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b08e      	sub	sp, #56	; 0x38
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 f9c3 	bl	8000a3e <HAL_Init>

  /* USER CODE BEGIN Init */

  	// 'phase' simulates the DAY/NIGHT cycle
	bool phase = NIGHT;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	// Init the system
	Timer timer;
 80006be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ffb1 	bl	800062a <_ZN5TimerC1Ev>
	LightController lightController;
 80006c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff feb8 	bl	8000442 <_ZN15LightControllerC1Ev>
	PhaseController phaseController(&phase);
 80006d2:	f107 0237 	add.w	r2, r7, #55	; 0x37
 80006d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff68 	bl	80005b2 <_ZN15PhaseControllerC1EPb>
	ItalianTrafficLight italianTrafficLight(&lightController, &timer);
 80006e2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80006e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80006ea:	f107 0318 	add.w	r3, r7, #24
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fe21 	bl	8000336 <_ZN19ItalianTrafficLightC1EP15LightControllerP5Timer>
	italianTrafficLight.setStatus(RED);
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fe2e 	bl	800035c <_ZN19ItalianTrafficLight9setStatusEi>
	BlinkingTrafficLight blinkingTrafficLight(&lightController, &timer);
 8000700:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000704:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fd5b 	bl	80001c8 <_ZN20BlinkingTrafficLightC1EP15LightControllerP5Timer>
	blinkingTrafficLight.setStatus(OFF);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2104      	movs	r1, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fd68 	bl	80001ee <_ZN20BlinkingTrafficLight9setStatusEi>
	Controller controller(&italianTrafficLight, &blinkingTrafficLight);
 800071e:	f107 020c 	add.w	r2, r7, #12
 8000722:	f107 0118 	add.w	r1, r7, #24
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fdb3 	bl	8000294 <_ZN10ControllerC1EP19ItalianTrafficLightP20BlinkingTrafficLight>

   /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f815 	bl	800075c <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */

  HAL_GPIO_WritePin(GPIOA, LedRed_Pin|LedYellow_Pin|LedGreen_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	21e0      	movs	r1, #224	; 0xe0
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f000 fc9d 	bl	8001078 <HAL_GPIO_WritePin>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 f87f 	bl	8000840 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN WHILE */
  while (1)
   {
     /* USER CODE END WHILE */

	  phaseController.checkButton();
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff42 	bl	80005d0 <_ZN15PhaseController11checkButtonEv>
	  controller.start(phase);
 800074c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4611      	mov	r1, r2
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fdb0 	bl	80002ba <_ZN10Controller5startEb>
	  phaseController.checkButton();
 800075a:	e7f2      	b.n	8000742 <main+0x94>

0800075c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b096      	sub	sp, #88	; 0x58
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2244      	movs	r2, #68	; 0x44
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f001 faf8 	bl	8001d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800077e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000782:	f000 fcaf 	bl	80010e4 <HAL_PWREx_ControlVoltageScaling>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	bf14      	ite	ne
 800078c:	2301      	movne	r3, #1
 800078e:	2300      	moveq	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000796:	f000 f8a3 	bl	80008e0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800079a:	f000 fc85 	bl	80010a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <_Z18SystemClock_Configv+0xe0>)
 80007a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <_Z18SystemClock_Configv+0xe0>)
 80007a6:	f023 0318 	bic.w	r3, r3, #24
 80007aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007ae:	2314      	movs	r3, #20
 80007b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b6:	2301      	movs	r3, #1
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007be:	2360      	movs	r3, #96	; 0x60
 80007c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007c6:	2301      	movs	r3, #1
 80007c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007ce:	2328      	movs	r3, #40	; 0x28
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007d2:	2307      	movs	r3, #7
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fcd4 	bl	8001190 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bf14      	ite	ne
 80007ee:	2301      	movne	r3, #1
 80007f0:	2300      	moveq	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80007f8:	f000 f872 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2303      	movs	r3, #3
 8000802:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	2104      	movs	r1, #4
 8000814:	4618      	mov	r0, r3
 8000816:	f001 f8a1 	bl	800195c <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800082a:	f000 f859 	bl	80008e0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800082e:	f001 fa63 	bl	8001cf8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000832:	bf00      	nop
 8000834:	3758      	adds	r7, #88	; 0x58
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <_ZL12MX_GPIO_Initv+0x94>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <_ZL12MX_GPIO_Initv+0x94>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <_ZL12MX_GPIO_Initv+0x94>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <_ZL12MX_GPIO_Initv+0x94>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <_ZL12MX_GPIO_Initv+0x94>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <_ZL12MX_GPIO_Initv+0x94>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedRed_Pin|LedYellow_Pin|LedGreen_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	21e0      	movs	r1, #224	; 0xe0
 800088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088e:	f000 fbf3 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <_ZL12MX_GPIO_Initv+0x98>)
 800089a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <_ZL12MX_GPIO_Initv+0x9c>)
 80008a8:	f000 fa24 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LedRed_Pin LedYellow_Pin LedGreen_Pin */
  GPIO_InitStruct.Pin = LedRed_Pin|LedYellow_Pin|LedGreen_Pin;
 80008ac:	23e0      	movs	r3, #224	; 0xe0
 80008ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f000 fa15 	bl	8000cf4 <HAL_GPIO_Init>

}
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000
 80008d8:	10110000 	.word	0x10110000
 80008dc:	48000800 	.word	0x48000800

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6613      	str	r3, [r2, #96]	; 0x60
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f8b2 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <SystemInit+0x5c>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <SystemInit+0x5c>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <SystemInit+0x60>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <SystemInit+0x60>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <SystemInit+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <SystemInit+0x60>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <SystemInit+0x60>)
 80009b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <SystemInit+0x60>)
 80009c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <SystemInit+0x60>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <SystemInit+0x60>)
 80009cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <SystemInit+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00
 80009e8:	40021000 	.word	0x40021000

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f0:	f7ff ffca 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009f6:	e003      	b.n	8000a00 <LoopCopyDataInit>

080009f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009fe:	3104      	adds	r1, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a08:	d3f6      	bcc.n	80009f8 <CopyDataInit>
	ldr	r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a0c:	e002      	b.n	8000a14 <LoopFillZerobss>

08000a0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a10:	f842 3b04 	str.w	r3, [r2], #4

08000a14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <LoopForever+0x16>)
	cmp	r2, r3
 8000a16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a18:	d3f9      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f001 f97d 	bl	8001d18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fe46 	bl	80006ae <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a24:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a28:	08001dd0 	.word	0x08001dd0
	ldr	r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a30:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a34:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a38:	2000002c 	.word	0x2000002c

08000a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_2_IRQHandler>

08000a3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f91f 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f80e 	bl	8000a70 <HAL_InitTick>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	e001      	b.n	8000a64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a60:	f7ff ff44 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a64:	79fb      	ldrb	r3, [r7, #7]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_InitTick+0x6c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d023      	beq.n	8000acc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_InitTick+0x70>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_InitTick+0x6c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f91d 	bl	8000cda <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d10f      	bne.n	8000ac6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d809      	bhi.n	8000ac0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f8f5 	bl	8000ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_InitTick+0x74>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e007      	b.n	8000ad0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e004      	b.n	8000ad0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e001      	b.n	8000ad0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000028 	.word	0x20000028

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000028 	.word	0x20000028

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff47 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff5c 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffb0 	bl	8000c48 <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e17f      	b.n	8001004 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8171 	beq.w	8000ffe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d00b      	beq.n	8000d3c <HAL_GPIO_Init+0x48>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d007      	beq.n	8000d3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d30:	2b11      	cmp	r3, #17
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b12      	cmp	r3, #18
 8000d3a:	d130      	bne.n	8000d9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d72:	2201      	movs	r2, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	f003 0201 	and.w	r2, r3, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d118      	bne.n	8000ddc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x128>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b12      	cmp	r3, #18
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	6939      	ldr	r1, [r7, #16]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80ac 	beq.w	8000ffe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b5f      	ldr	r3, [pc, #380]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	4a5e      	ldr	r2, [pc, #376]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ebe:	4a5a      	ldr	r2, [pc, #360]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ee8:	d025      	beq.n	8000f36 <HAL_GPIO_Init+0x242>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4f      	ldr	r2, [pc, #316]	; (800102c <HAL_GPIO_Init+0x338>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01f      	beq.n	8000f32 <HAL_GPIO_Init+0x23e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <HAL_GPIO_Init+0x33c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x23a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4d      	ldr	r2, [pc, #308]	; (8001034 <HAL_GPIO_Init+0x340>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x236>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_GPIO_Init+0x344>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x232>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <HAL_GPIO_Init+0x348>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x22e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4a      	ldr	r2, [pc, #296]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x22a>
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e00a      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f22:	2305      	movs	r3, #5
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f36:	2300      	movs	r3, #0
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f48:	4937      	ldr	r1, [pc, #220]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f7a:	4a32      	ldr	r2, [pc, #200]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa4:	4a27      	ldr	r2, [pc, #156]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa22 f303 	lsr.w	r3, r2, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	f47f ae78 	bne.w	8000d04 <HAL_GPIO_Init+0x10>
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	48000400 	.word	0x48000400
 8001030:	48000800 	.word	0x48000800
 8001034:	48000c00 	.word	0x48000c00
 8001038:	48001000 	.word	0x48001000
 800103c:	48001400 	.word	0x48001400
 8001040:	48001800 	.word	0x48001800
 8001044:	40010400 	.word	0x40010400

08001048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e001      	b.n	800106a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001094:	e002      	b.n	800109c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40007000 	.word	0x40007000

080010c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f2:	d130      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001100:	d038      	beq.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800110a:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001110:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2232      	movs	r2, #50	; 0x32
 8001118:	fb02 f303 	mul.w	r3, r2, r3
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0c9b      	lsrs	r3, r3, #18
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001128:	e002      	b.n	8001130 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3b01      	subs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113c:	d102      	bne.n	8001144 <HAL_PWREx_ControlVoltageScaling+0x60>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f2      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001150:	d110      	bne.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e00f      	b.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001162:	d007      	beq.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800116c:	4a05      	ldr	r2, [pc, #20]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40007000 	.word	0x40007000
 8001188:	20000000 	.word	0x20000000
 800118c:	431bde83 	.word	0x431bde83

08001190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e3d4      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a2:	4ba1      	ldr	r3, [pc, #644]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ac:	4b9e      	ldr	r3, [pc, #632]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80e4 	beq.w	800138c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <HAL_RCC_OscConfig+0x4a>
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2b0c      	cmp	r3, #12
 80011ce:	f040 808b 	bne.w	80012e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	f040 8087 	bne.w	80012e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011da:	4b93      	ldr	r3, [pc, #588]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_OscConfig+0x62>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e3ac      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a1a      	ldr	r2, [r3, #32]
 80011f6:	4b8c      	ldr	r3, [pc, #560]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <HAL_RCC_OscConfig+0x7c>
 8001202:	4b89      	ldr	r3, [pc, #548]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800120a:	e005      	b.n	8001218 <HAL_RCC_OscConfig+0x88>
 800120c:	4b86      	ldr	r3, [pc, #536]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800120e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001218:	4293      	cmp	r3, r2
 800121a:	d223      	bcs.n	8001264 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fd09 	bl	8001c38 <RCC_SetFlashLatencyFromMSIRange>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e38d      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001230:	4b7d      	ldr	r3, [pc, #500]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a7c      	ldr	r2, [pc, #496]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b7a      	ldr	r3, [pc, #488]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4977      	ldr	r1, [pc, #476]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124e:	4b76      	ldr	r3, [pc, #472]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	4972      	ldr	r1, [pc, #456]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
 8001262:	e025      	b.n	80012b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001264:	4b70      	ldr	r3, [pc, #448]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a6f      	ldr	r2, [pc, #444]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b6d      	ldr	r3, [pc, #436]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	496a      	ldr	r1, [pc, #424]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001282:	4b69      	ldr	r3, [pc, #420]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	4965      	ldr	r1, [pc, #404]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fcc9 	bl	8001c38 <RCC_SetFlashLatencyFromMSIRange>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e34d      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012b0:	f000 fc36 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4b5c      	ldr	r3, [pc, #368]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 030f 	and.w	r3, r3, #15
 80012c0:	495a      	ldr	r1, [pc, #360]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80012c2:	5ccb      	ldrb	r3, [r1, r3]
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
 80012cc:	4a58      	ldr	r2, [pc, #352]	; (8001430 <HAL_RCC_OscConfig+0x2a0>)
 80012ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012d0:	4b58      	ldr	r3, [pc, #352]	; (8001434 <HAL_RCC_OscConfig+0x2a4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fbcb 	bl	8000a70 <HAL_InitTick>
 80012da:	4603      	mov	r3, r0
 80012dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d052      	beq.n	800138a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	e331      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d032      	beq.n	8001356 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f0:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc08 	bl	8000b10 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001304:	f7ff fc04 	bl	8000b10 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e31a      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a40      	ldr	r2, [pc, #256]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	493b      	ldr	r1, [pc, #236]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001340:	4b39      	ldr	r3, [pc, #228]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	4936      	ldr	r1, [pc, #216]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
 8001354:	e01a      	b.n	800138c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001356:	4b34      	ldr	r3, [pc, #208]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a33      	ldr	r2, [pc, #204]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001362:	f7ff fbd5 	bl	8000b10 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800136a:	f7ff fbd1 	bl	8000b10 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e2e7      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0x1da>
 8001388:	e000      	b.n	800138c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d074      	beq.n	8001482 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b08      	cmp	r3, #8
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x21a>
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	d10e      	bne.n	80013c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d10b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d064      	beq.n	8001480 <HAL_RCC_OscConfig+0x2f0>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d160      	bne.n	8001480 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e2c4      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x24a>
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a15      	ldr	r2, [pc, #84]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e01d      	b.n	8001416 <HAL_RCC_OscConfig+0x286>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x26e>
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e00b      	b.n	8001416 <HAL_RCC_OscConfig+0x286>
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01c      	beq.n	8001458 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fb77 	bl	8000b10 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001424:	e011      	b.n	800144a <HAL_RCC_OscConfig+0x2ba>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	08001d88 	.word	0x08001d88
 8001430:	20000000 	.word	0x20000000
 8001434:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fb6a 	bl	8000b10 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e280      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144a:	4baf      	ldr	r3, [pc, #700]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x2a8>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fb5a 	bl	8000b10 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fb56 	bl	8000b10 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e26c      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001472:	4ba5      	ldr	r3, [pc, #660]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x2d0>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d060      	beq.n	8001550 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b04      	cmp	r3, #4
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_OscConfig+0x310>
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d119      	bne.n	80014ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d116      	bne.n	80014ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a0:	4b99      	ldr	r3, [pc, #612]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x328>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e249      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b93      	ldr	r3, [pc, #588]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	4990      	ldr	r1, [pc, #576]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014cc:	e040      	b.n	8001550 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d023      	beq.n	800151e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d6:	4b8c      	ldr	r3, [pc, #560]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a8b      	ldr	r2, [pc, #556]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb15 	bl	8000b10 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fb11 	bl	8000b10 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e227      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fc:	4b82      	ldr	r3, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001508:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	061b      	lsls	r3, r3, #24
 8001516:	497c      	ldr	r1, [pc, #496]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	e018      	b.n	8001550 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151e:	4b7a      	ldr	r3, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a79      	ldr	r2, [pc, #484]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff faf1 	bl	8000b10 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff faed 	bl	8000b10 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e203      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001544:	4b70      	ldr	r3, [pc, #448]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d03c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01c      	beq.n	800159e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156a:	4a67      	ldr	r2, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff facc 	bl	8000b10 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fac8 	bl	8000b10 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1de      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158e:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ef      	beq.n	800157c <HAL_RCC_OscConfig+0x3ec>
 800159c:	e01b      	b.n	80015d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159e:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a4:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ae:	f7ff faaf 	bl	8000b10 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b6:	f7ff faab 	bl	8000b10 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1c1      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c8:	4b4f      	ldr	r3, [pc, #316]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ef      	bne.n	80015b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80a6 	beq.w	8001730 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015e8:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10d      	bne.n	8001610 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	4b44      	ldr	r3, [pc, #272]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	4a43      	ldr	r2, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160c:	2301      	movs	r3, #1
 800160e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001610:	4b3e      	ldr	r3, [pc, #248]	; (800170c <HAL_RCC_OscConfig+0x57c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d118      	bne.n	800164e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_RCC_OscConfig+0x57c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a3a      	ldr	r2, [pc, #232]	; (800170c <HAL_RCC_OscConfig+0x57c>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001628:	f7ff fa72 	bl	8000b10 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001630:	f7ff fa6e 	bl	8000b10 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e184      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001642:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_RCC_OscConfig+0x57c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d108      	bne.n	8001668 <HAL_RCC_OscConfig+0x4d8>
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165c:	4a2a      	ldr	r2, [pc, #168]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001666:	e024      	b.n	80016b2 <HAL_RCC_OscConfig+0x522>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d110      	bne.n	8001692 <HAL_RCC_OscConfig+0x502>
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	4a24      	ldr	r2, [pc, #144]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a20      	ldr	r2, [pc, #128]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001690:	e00f      	b.n	80016b2 <HAL_RCC_OscConfig+0x522>
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80016a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d016      	beq.n	80016e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fa29 	bl	8000b10 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fa25 	bl	8000b10 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e139      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0ed      	beq.n	80016c2 <HAL_RCC_OscConfig+0x532>
 80016e6:	e01a      	b.n	800171e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e8:	f7ff fa12 	bl	8000b10 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ee:	e00f      	b.n	8001710 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f7ff fa0e 	bl	8000b10 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d906      	bls.n	8001710 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e122      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001710:	4b90      	ldr	r3, [pc, #576]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1e8      	bne.n	80016f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171e:	7ffb      	ldrb	r3, [r7, #31]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b8b      	ldr	r3, [pc, #556]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	4a8a      	ldr	r2, [pc, #552]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8108 	beq.w	800194a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	2b02      	cmp	r3, #2
 8001740:	f040 80d0 	bne.w	80018e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001744:	4b83      	ldr	r3, [pc, #524]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0203 	and.w	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	429a      	cmp	r2, r3
 8001756:	d130      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	3b01      	subs	r3, #1
 8001764:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d127      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d11f      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001784:	2a07      	cmp	r2, #7
 8001786:	bf14      	ite	ne
 8001788:	2201      	movne	r2, #1
 800178a:	2200      	moveq	r2, #0
 800178c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800178e:	4293      	cmp	r3, r2
 8001790:	d113      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d109      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	3b01      	subs	r3, #1
 80017b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d06e      	beq.n	8001898 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d069      	beq.n	8001894 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017c0:	4b64      	ldr	r3, [pc, #400]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017cc:	4b61      	ldr	r3, [pc, #388]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0b7      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017dc:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a5c      	ldr	r2, [pc, #368]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80017e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e8:	f7ff f992 	bl	8000b10 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f98e 	bl	8000b10 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0a4      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001802:	4b54      	ldr	r3, [pc, #336]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180e:	4b51      	ldr	r3, [pc, #324]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	4b51      	ldr	r3, [pc, #324]	; (8001958 <HAL_RCC_OscConfig+0x7c8>)
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800181e:	3a01      	subs	r2, #1
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	4311      	orrs	r1, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001828:	0212      	lsls	r2, r2, #8
 800182a:	4311      	orrs	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001830:	0852      	lsrs	r2, r2, #1
 8001832:	3a01      	subs	r2, #1
 8001834:	0552      	lsls	r2, r2, #21
 8001836:	4311      	orrs	r1, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800183c:	0852      	lsrs	r2, r2, #1
 800183e:	3a01      	subs	r2, #1
 8001840:	0652      	lsls	r2, r2, #25
 8001842:	4311      	orrs	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001848:	0912      	lsrs	r2, r2, #4
 800184a:	0452      	lsls	r2, r2, #17
 800184c:	430a      	orrs	r2, r1
 800184e:	4941      	ldr	r1, [pc, #260]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001854:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a3e      	ldr	r2, [pc, #248]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 800185a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001860:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a3b      	ldr	r2, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800186c:	f7ff f950 	bl	8000b10 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f94c 	bl	8000b10 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e062      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001886:	4b33      	ldr	r3, [pc, #204]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001892:	e05a      	b.n	800194a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e059      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d152      	bne.n	800194a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2a      	ldr	r2, [pc, #168]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018bc:	f7ff f928 	bl	8000b10 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f924 	bl	8000b10 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e03a      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x734>
 80018e2:	e032      	b.n	800194a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d02d      	beq.n	8001946 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4a13      	ldr	r2, [pc, #76]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001908:	f023 0303 	bic.w	r3, r3, #3
 800190c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001914:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff f8f7 	bl	8000b10 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff f8f3 	bl	8000b10 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e009      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f0      	bne.n	8001926 <HAL_RCC_OscConfig+0x796>
 8001944:	e001      	b.n	800194a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	f99d808c 	.word	0xf99d808c

0800195c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0c8      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d910      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 0207 	bic.w	r2, r3, #7
 8001986:	4961      	ldr	r1, [pc, #388]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b5f      	ldr	r3, [pc, #380]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0b0      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d04c      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b4:	4b56      	ldr	r3, [pc, #344]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d121      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e09e      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019cc:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d115      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e092      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e4:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e086      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b46      	ldr	r3, [pc, #280]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e07e      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a04:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 0203 	bic.w	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	493f      	ldr	r1, [pc, #252]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a16:	f7ff f87b 	bl	8000b10 <HAL_GetTick>
 8001a1a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1e:	f7ff f877 	bl	8000b10 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e066      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 020c 	and.w	r2, r3, #12
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d1eb      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	492c      	ldr	r1, [pc, #176]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d210      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4924      	ldr	r1, [pc, #144]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e036      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4918      	ldr	r1, [pc, #96]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4910      	ldr	r1, [pc, #64]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad2:	f000 f825 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490c      	ldr	r1, [pc, #48]	; (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe ffba 	bl	8000a70 <HAL_InitTick>
 8001afc:	4603      	mov	r3, r0
 8001afe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b00:	7afb      	ldrb	r3, [r7, #11]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08001d88 	.word	0x08001d88
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b38:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x34>
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	d121      	bne.n	8001b92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d11e      	bne.n	8001b92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	e005      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b70:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b7c:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10d      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	e004      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ba6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d134      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d003      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0xac>
 8001bc4:	e005      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bc8:	617b      	str	r3, [r7, #20]
      break;
 8001bca:	e005      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bce:	617b      	str	r3, [r7, #20]
      break;
 8001bd0:	e002      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	617b      	str	r3, [r7, #20]
      break;
 8001bd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	3301      	adds	r3, #1
 8001be4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	fb02 f203 	mul.w	r2, r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	0e5b      	lsrs	r3, r3, #25
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	3301      	adds	r3, #1
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c18:	69bb      	ldr	r3, [r7, #24]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08001d98 	.word	0x08001d98
 8001c30:	00f42400 	.word	0x00f42400
 8001c34:	007a1200 	.word	0x007a1200

08001c38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c50:	f7ff fa3a 	bl	80010c8 <HAL_PWREx_GetVoltageRange>
 8001c54:	6178      	str	r0, [r7, #20]
 8001c56:	e014      	b.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c62:	6593      	str	r3, [r2, #88]	; 0x58
 8001c64:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c70:	f7ff fa2a 	bl	80010c8 <HAL_PWREx_GetVoltageRange>
 8001c74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c88:	d10b      	bne.n	8001ca2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b80      	cmp	r3, #128	; 0x80
 8001c8e:	d919      	bls.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2ba0      	cmp	r3, #160	; 0xa0
 8001c94:	d902      	bls.n	8001c9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c96:	2302      	movs	r3, #2
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e013      	b.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	e010      	b.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b80      	cmp	r3, #128	; 0x80
 8001ca6:	d902      	bls.n	8001cae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ca8:	2303      	movs	r3, #3
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	e00a      	b.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d102      	bne.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	e004      	b.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b70      	cmp	r3, #112	; 0x70
 8001cbe:	d101      	bne.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 0207 	bic.w	r2, r3, #7
 8001ccc:	4909      	ldr	r1, [pc, #36]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000

08001d18 <__libc_init_array>:
 8001d18:	b570      	push	{r4, r5, r6, lr}
 8001d1a:	4d0d      	ldr	r5, [pc, #52]	; (8001d50 <__libc_init_array+0x38>)
 8001d1c:	4c0d      	ldr	r4, [pc, #52]	; (8001d54 <__libc_init_array+0x3c>)
 8001d1e:	1b64      	subs	r4, r4, r5
 8001d20:	10a4      	asrs	r4, r4, #2
 8001d22:	2600      	movs	r6, #0
 8001d24:	42a6      	cmp	r6, r4
 8001d26:	d109      	bne.n	8001d3c <__libc_init_array+0x24>
 8001d28:	4d0b      	ldr	r5, [pc, #44]	; (8001d58 <__libc_init_array+0x40>)
 8001d2a:	4c0c      	ldr	r4, [pc, #48]	; (8001d5c <__libc_init_array+0x44>)
 8001d2c:	f000 f820 	bl	8001d70 <_init>
 8001d30:	1b64      	subs	r4, r4, r5
 8001d32:	10a4      	asrs	r4, r4, #2
 8001d34:	2600      	movs	r6, #0
 8001d36:	42a6      	cmp	r6, r4
 8001d38:	d105      	bne.n	8001d46 <__libc_init_array+0x2e>
 8001d3a:	bd70      	pop	{r4, r5, r6, pc}
 8001d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d40:	4798      	blx	r3
 8001d42:	3601      	adds	r6, #1
 8001d44:	e7ee      	b.n	8001d24 <__libc_init_array+0xc>
 8001d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d4a:	4798      	blx	r3
 8001d4c:	3601      	adds	r6, #1
 8001d4e:	e7f2      	b.n	8001d36 <__libc_init_array+0x1e>
 8001d50:	08001dc8 	.word	0x08001dc8
 8001d54:	08001dc8 	.word	0x08001dc8
 8001d58:	08001dc8 	.word	0x08001dc8
 8001d5c:	08001dcc 	.word	0x08001dcc

08001d60 <memset>:
 8001d60:	4402      	add	r2, r0
 8001d62:	4603      	mov	r3, r0
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d100      	bne.n	8001d6a <memset+0xa>
 8001d68:	4770      	bx	lr
 8001d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d6e:	e7f9      	b.n	8001d64 <memset+0x4>

08001d70 <_init>:
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d72:	bf00      	nop
 8001d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d76:	bc08      	pop	{r3}
 8001d78:	469e      	mov	lr, r3
 8001d7a:	4770      	bx	lr

08001d7c <_fini>:
 8001d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7e:	bf00      	nop
 8001d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d82:	bc08      	pop	{r3}
 8001d84:	469e      	mov	lr, r3
 8001d86:	4770      	bx	lr
